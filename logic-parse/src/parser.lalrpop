use crate::ast::*;
use crate::symbol::Symbol;

grammar;

pub Program: Program = <(<Item> ".")*> => Program::new(<>);

pub Item: Item = {
    <Clause> => Item::Clause(<>)
}

pub Clause: Clause = {
    "forall" "<" <vars:Comma1<Var>> ">" "{" <clause:Clause> "}" => Clause::ForAll(vars, Box::new(clause)),
    // can readd with this when necessary, has precedence/associativity ambiguities the way it's written
    <DomainGoal> ":-" <Goal> => Clause::Implies(<>),
    // <Clause> "," <Clause> => Clause::And(Box::new(<>), Box::new(<>)),
    <DomainGoal> => Clause::DomainGoal(<>),
}


pub Goal: Goal = {
    <DomainGoal> => Goal::DomainGoal(<>),
    // <Goal> "," <Goal> => Goal::And(Box::new(<>), Box::new(<>)),
    // <Goal> ";" <Goal> => Goal::Or(Box::new(<>), Box::new(<>)),
    // TODO incomplete
}

pub DomainGoal: DomainGoal = {
    <Constraint> => DomainGoal::Holds(<>),
}

pub Constraint: Constraint = {
    <ImplConstraint> => Constraint::Implemented(<>),
}

pub ImplConstraint: ImplConstraint = {
    <ty:Ty> ":" <trait_ref:TraitRef> => ImplConstraint {
        ty,
        trait_ref,
    }
}

pub TraitRef: TraitRef = {
    <trait_name:Ident> <args:Angle<Ty>> => TraitRef {
       trait_name,
       args
    }
}

pub Var: Var = {
    <Ident> => Var::Ty(<>)
}

Ident: Ident = {
    <l:@L> <s:r"([A-Za-z]|_)([A-Za-z0-9]|_)*"> <r:@R> => Ident {
        symbol: Symbol::from(s),
        span: Span::new(l, r),
    }
};

pub Ty: Ty = {
    <Ident> <Angle<Ty>> => Ty::Structure(<>),
}


Comma1<T>: Vec<T> = {
    <x:T> <xs:("," <T>)*> ","? => {
        let mut v = vec![x];
        v.extend(xs);
        v
    }
}

Angle<T>: Vec<T> = {
    "<" <Comma<T>> ">",
    () => vec![],
};

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}